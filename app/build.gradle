/*
 * Copyright (c) 2014 Mohit Kanwal.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 */
import com.android.build.gradle.tasks.Dex

apply plugin: 'com.android.application'
def log = project.logger
def BUILD_TOOLS_VERSION = "19.1.0"
android {
    compileSdkVersion 19
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    // Need to disable pre dexing to be able to build properly
    // Otherwise we need to add more tasks to the libraries
    // This is a small penalty to keep the house in order!
    dexOptions {
        incremental false
        preDexLibraries = false
        jumboMode = false
    }
    enforceUniquePackageName false
    useOldManifestMerger true

    buildTypes {
        release {
            runProguard true
            debuggable false
            zipAlign true
            proguardFiles 'proguard-rules.txt'
            signingConfig debug.signingConfig
        }
    }
}
/**
 * Relies on the Bash Script to manipulate the Dexing of the correct classes.
 */
afterEvaluate { project ->
    android.applicationVariants.each {
        variant ->
            /**
             * Alternative Approach to configuring the DEX task
             * Instead of doing all the pains to run the proguard task properly, simply
             *      1.Intercept the output move the "Package" to another directory.
             *      2.Run DEX to generate a new DEX file for that package
             *      3.Package the rest of the package files to generate the library stuff.
             *      4.Load this in runtime.
             */
            Properties props = new Properties()
            props.load(new FileInputStream(project.rootProject.file("local.properties")))

            def packagingTask = project.tasks.create("customizeDexesFor${variant.name}", Exec)
            packagingTask.commandLine 'bash', '.././package.sh',
                    "${variant.flavorName}",
                    "${variant.buildType.name}",
                    "${variant.mergeAssets.outputDir}",
                    "${props.get("sdk.dir")}/build-tools/${BUILD_TOOLS_VERSION}"


            println "[Dexing] debug: ${variant.name}"
            if (variant.name.contains("release")) {
                if (variant.variantData.obfuscationTask != null) {
                    println "[Dexing] Adding Task to run after proguard"
                    packagingTask.dependsOn variant.variantData.obfuscationTask
                } else {
                    println "[Dexing] Obfuscation task is null ${variant.variantData}"
                }
            } else {
                // For Debug simply remove the library from getting dex and create it
                //----------------------- Extra Debug Step ----------------//
                def libraryFiles = new ArrayList<?>()
                def secondaryFile = new ArrayList<?>()

                variant.dex.libraries.each {
                    File file ->
                        if (!file.absolutePath.contains("lib/unspecified/classes.jar")) {
                            libraryFiles.add(file)
                        } else {
                            secondaryFile.add(file)
                        }
                }
                variant.dex.libraries = libraryFiles
                //----------------------- Extra Debug Step ----------------//

                packagingTask.dependsOn variant.javaCompile
            }

            // Finally Depend on Dex Task
            String dexTaskName = "dex${variant.variantData.name.capitalize()}"
            Dex dexTask = tasks.findByName(dexTaskName)
            dexTask.dependsOn packagingTask
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.+'
    compile project(':lib')
}

